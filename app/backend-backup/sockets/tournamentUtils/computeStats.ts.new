// filepath: /home/aflesch/mathquest/app/sockets/tournamentUtils/computeStats.ts
/**
 * computeStats.ts - Utility to compute answer stats for a question in a tournament
 * 
 * This module provides functions to analyze participant answers and generate statistics.
 */

import { TournamentState } from '../types/tournamentTypes';

/**
 * Statistics result interface
 */
export interface AnswerStats {
  stats: number[];
  totalAnswers: number;
}

/**
 * Compute answer statistics for a specific question in a tournament
 * @param tState - Tournament state object
 * @param questionUid - Unique identifier of the question to analyze
 * @returns Distribution of answers as percentages and total answer count
 */
export function computeAnswerStats(
  tState: TournamentState | undefined | null, 
  questionUid: string
): AnswerStats {
    if (!tState || !tState.questions) return { stats: [], totalAnswers: 0 };
    const question = (tState.questions || []).find(q => q.uid === questionUid);
    
    if (!question || !Array.isArray(question.reponses)) return { stats: [], totalAnswers: 0 };
    
    const answerCounts = new Array(question.reponses.length).fill(0);
    let total = 0;
    
    // Loop through all participants' answers
    for (const jId in tState.answers) {
        if (!tState.answers[jId]) continue;
        
        const ans = tState.answers[jId][questionUid];
        if (!ans) continue;
        
        // Handle multiple-choice answers (array of indices)
        if (Array.isArray(ans.answerIdx)) {
            ans.answerIdx.forEach((idx: number) => {
                if (typeof idx === 'number' && answerCounts[idx] !== undefined) {
                    answerCounts[idx]++;
                }
            });
            total++;
        } 
        // Handle single-choice answers (single index)
        else if (typeof ans.answerIdx === 'number' && answerCounts[ans.answerIdx] !== undefined) {
            answerCounts[ans.answerIdx]++;
            total++;
        }
    }
    
    // Calculate percentages
    const stats = answerCounts.map(count => total > 0 ? Math.round((count / total) * 100) : 0);
    return { stats, totalAnswers: total };
}

// Create the default export object
const defaultExport = {
    computeAnswerStats
};

export default defaultExport;

// For CommonJS compatibility
// This makes the functions available both as named exports and as properties of the module.exports object
if (typeof module !== 'undefined') {
    Object.assign(module.exports, defaultExport);
    // @ts-ignore - TypeScript doesn't like this but it's needed for CommonJS compatibility
    module.exports.default = defaultExport;
}
