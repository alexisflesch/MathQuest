// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Make sure to set this in your .env file
}

model Question {
  uid         String    @id @default(uuid())
  question    String
  reponses    Json // Assuming structure: [{ texte: String, correct: Boolean }]
  type        String // e.g., 'qcm', 'choix_simple'
  discipline  String
  theme       String
  difficulte  Int
  niveau      String
  auteur      String?
  explication String?
  tags        String[]
  temps       Int? // Time in seconds

  // Relation placeholder if questions are linked to quizzes/tournaments directly
  // tournois Tournoi[] @relation("TournoiQuestions")
}

model Enseignant {
  id           String    @id @default(uuid())
  pseudo       String
  mot_de_passe String // Hashed password
  email        String?   @unique // Optional but unique if provided
  created_at   DateTime  @default(now())
  avatar       String?

  // Password reset fields
  reset_token         String?
  reset_token_expires DateTime?

  tournois          Tournoi[]
  tournoisSauvegardes TournoiSauvegarde[]
}

model Joueur {
  id         String   @id @default(uuid())
  pseudo     String
  cookie_id  String   @unique // Identifier linked to user's session/cookie
  created_at DateTime @default(now())
  avatar     String?

  scores   Score[]
  tournois Tournoi[] // If players can create tournaments
}

model Tournoi {
  id                 String    @id @default(uuid())
  nom                String
  date_creation      DateTime  @default(now())
  date_debut         DateTime?
  date_fin           DateTime?
  statut             String // "en préparation", "en cours", "terminé"
  enseignant_id      String? // Link to Enseignant
  questions_ids      String[] // List of Question uids
  type               String // "direct", "differé"
  niveau             String?
  categorie          String?
  themes             String[]
  cree_par_id        String // Link to Enseignant or Joueur ID
  questions_generées Boolean   @default(false)
  code               String?   @unique // Unique code to join

  enseignant         Enseignant? @relation(fields: [enseignant_id], references: [id])
  createur           Joueur?     @relation(fields: [cree_par_id], references: [id]) // Assuming cree_par links to Joueur for now, adjust if needed
  scores             Score[]

  // Relation placeholder if using relation table for questions
  // questions Question[] @relation("TournoiQuestions")
}

model Score {
  id         String   @id @default(uuid())
  tournoi_id String
  joueur_id  String
  score      Int
  temps      Int? // Time in seconds
  position   Int?
  date_score DateTime @default(now())

  tournoi Tournoi @relation(fields: [tournoi_id], references: [id])
  joueur  Joueur  @relation(fields: [joueur_id], references: [id])

  @@unique([tournoi_id, joueur_id]) // Ensure one score per player per tournament
}

model TournoiSauvegarde {
  id              String    @id @default(uuid())
  nom             String
  date_creation   DateTime  @default(now()) // When the original tournament was created
  date_sauvegarde DateTime  @default(now()) // When this saved instance was created
  enseignant_id   String
  questions_ids   String[]
  type            String
  niveaux         String[]     // <-- Now an array of niveaux (school years/levels)
  categories      String[]     // Multiple disciplines/categories
  themes          String[]

  enseignant Enseignant @relation(fields: [enseignant_id], references: [id])
}
