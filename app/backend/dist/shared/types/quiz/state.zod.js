"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extendedQuizStateSchema = exports.baseQuizStateSchema = exports.questionTimerSchema = exports.chronoSchema = void 0;
// Generated by ts-to-zod
const zod_1 = require("zod");
exports.chronoSchema = zod_1.z.object({
    timeLeft: zod_1.z.number().nullable(),
    running: zod_1.z.boolean(),
    status: zod_1.z
        .union([zod_1.z.literal("play"), zod_1.z.literal("pause"), zod_1.z.literal("stop")])
        .optional(),
});
exports.questionTimerSchema = zod_1.z.object({
    status: zod_1.z.union([zod_1.z.literal("play"), zod_1.z.literal("pause"), zod_1.z.literal("stop")]),
    timeLeft: zod_1.z.number(),
    initialTime: zod_1.z.number(),
    timestamp: zod_1.z.number().nullable(),
});
const questionSchema = zod_1.z.any();
exports.baseQuizStateSchema = zod_1.z.object({
    questions: zod_1.z.array(questionSchema),
    chrono: exports.chronoSchema,
    locked: zod_1.z.boolean(),
    ended: zod_1.z.boolean(),
    currentQuestionIdx: zod_1.z.number().optional().nullable(),
});
exports.extendedQuizStateSchema = exports.baseQuizStateSchema.extend({
    id: zod_1.z.string().optional(),
    quizId: zod_1.z.string().optional(),
    currentQuestionUid: zod_1.z.string().nullable(),
    stats: zod_1.z.record(zod_1.z.any()).optional(),
    profSocketId: zod_1.z.string().optional().nullable(),
    profTeacherId: zod_1.z.string().optional(),
    timerStatus: zod_1.z
        .union([zod_1.z.literal("play"), zod_1.z.literal("pause"), zod_1.z.literal("stop")])
        .optional(),
    timerQuestionId: zod_1.z.string().optional().nullable(),
    timerTimeLeft: zod_1.z.number().optional().nullable(),
    timerTimestamp: zod_1.z.number().optional().nullable(),
    timerInitialValue: zod_1.z.number().optional().nullable(),
    tournament_code: zod_1.z.string().optional().nullable(),
    connectedSockets: zod_1.z.set(zod_1.z.string()).optional(),
    questionTimers: zod_1.z.record(exports.questionTimerSchema).optional(),
    pauseHandled: zod_1.z.number().optional(),
    resumeHandled: zod_1.z.number().optional(),
    lockedQuestions: zod_1.z.record(zod_1.z.boolean()).optional(),
    socketToJoueur: zod_1.z.record(zod_1.z.string()).optional(),
    participants: zod_1.z.record(zod_1.z.any()).optional(),
    askedQuestions: zod_1.z.set(zod_1.z.string()).optional(),
});
