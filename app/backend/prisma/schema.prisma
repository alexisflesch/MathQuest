generator client {
    provider = "prisma-client-js"
    output   = "../src/db/generated/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL") // Make sure to set this in your .env file
}

model User {
    id           String   @id @default(uuid())
    username     String // removed @unique
    email        String?  @unique
    passwordHash String?
    avatarUrl    String?
    createdAt    DateTime @default(now())
    role         UserRole

    // Relations
    createdGameTemplates   GameTemplate[]    @relation("UserCreatedGameTemplates")
    initiatedGameInstances GameInstance[]    @relation("InitiatedGameInstancesByUser")
    gameParticipations     GameParticipant[]

    // Optional: 1:1 profile tables for extra fields
    teacherProfile TeacherProfile?
    studentProfile StudentProfile?
}

enum UserRole {
    STUDENT
    TEACHER
}

model TeacherProfile {
    id   String @id
    user User   @relation(fields: [id], references: [id])
    // teacher-specific fields...
}

model StudentProfile {
    id       String  @id
    user     User    @relation(fields: [id], references: [id])
    cookieId String? @unique @map("cookie_id")
    // student-specific fields...
}

model Question {
    uid              String    @id @default(uuid())
    title            String? // Optional title for the question
    text             String    @map("question_text")
    answerOptions    String[]  @map("answer_options") // Array of text options, replaces responses
    correctAnswers   Boolean[] @default([]) @map("correct_answers") // Array of booleans, can be empty if not used
    questionType     String    @map("question_type") // e.g., 'multiple_choice_single_answer', 'multiple_choice_multiple_answers', 'short_answer'
    discipline       String
    themes           String[]
    difficulty       Int?
    gradeLevel       String?   @map("grade_level")
    author           String?
    explanation      String?
    tags             String[]
    timeLimit        Int?      @map("time_limit_seconds") // Time in seconds
    isHidden         Boolean?  @default(false) @map("is_hidden") // Optional boolean to hide the question to students
    feedbackWaitTime Int? // Time in seconds to wait for feedback after answering

    gameTemplates QuestionsInGameTemplate[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("questions") // Explicitly map table name
}

enum PlayMode {
    quiz
    tournament
    practice
    class
}

model GameTemplate {
    id          String    @id @default(uuid())
    name        String
    creatorId   String    @map("creator_id")
    gradeLevel  String?   @map("grade_level")
    themes      String[]
    discipline  String?
    description String?
    defaultMode PlayMode? @map("default_mode") // e.g., quiz, tournament, practice
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")

    creator       User                      @relation("UserCreatedGameTemplates", fields: [creatorId], references: [id])
    questions     QuestionsInGameTemplate[]
    gameInstances GameInstance[]

    @@map("game_templates") // Explicitly map table name
}

// Explicit join table for ordered questions in a GameTemplate
model QuestionsInGameTemplate {
    gameTemplateId String @map("game_template_id")
    questionUid    String @map("question_uid")
    sequence       Int // Order of the question in the game template

    gameTemplate GameTemplate @relation(fields: [gameTemplateId], references: [id], onDelete: Cascade)
    question     Question     @relation(fields: [questionUid], references: [uid], onDelete: Cascade)

    createdAt DateTime @default(now()) @map("created_at")

    @@id([gameTemplateId, sequence]) // Ensures sequence is unique per template
    @@unique([gameTemplateId, questionUid]) // Ensures a question appears only once per template
    @@map("questions_in_game_templates") // Explicitly map table name
}

model GameInstance {
    id                    String    @id @default(uuid())
    name                  String // e.g., "Algebra Quiz - Morning Class - May 14"
    gameTemplateId        String    @map("game_template_id")
    initiatorUserId       String?   @map("initiator_user_id")
    accessCode            String    @unique @map("access_code") // Unique for joining this specific instance
    status                String // "pending", "active", "paused", "completed", "archived"
    playMode              PlayMode  @map("play_mode") // "quiz", "tournament", or "practice"
    leaderboard           Json? // Specific to this instance
    currentQuestionIndex  Int?      @map("current_question_index") // For live games, to track progress
    settings              Json? // Game-specific settings (e.g., show leaderboard after each question, timer multiplier)
    createdAt             DateTime  @default(now()) @map("created_at")
    startedAt             DateTime? @map("started_at")
    endedAt               DateTime? @map("ended_at")
    // Differed mode support
    isDiffered            Boolean   @default(false) @map("is_differed")
    differedAvailableFrom DateTime? @map("differed_available_from")
    differedAvailableTo   DateTime? @map("differed_available_to")

    gameTemplate  GameTemplate      @relation(fields: [gameTemplateId], references: [id])
    initiatorUser User?             @relation("InitiatedGameInstancesByUser", fields: [initiatorUserId], references: [id])
    participants  GameParticipant[]

    @@index([accessCode])
    @@map("game_instances") // Explicitly map table name
}

model GameParticipant {
    id             String    @id @default(uuid())
    gameInstanceId String    @map("game_instance_id")
    userId         String    @map("user_id")
    score          Int       @default(0)
    rank           Int? // Calculated rank on the leaderboard
    timeTakenMs    Int?      @map("time_taken_ms") // Total time taken for all questions
    joinedAt       DateTime  @default(now()) @map("joined_at")
    completedAt    DateTime? @map("completed_at")
    answers        Json? // Detailed answers: [{ questionUid: String, answer: any, isCorrect: Boolean, timeTakenMs: Int, score: Int }]

    gameInstance GameInstance @relation(fields: [gameInstanceId], references: [id], onDelete: Cascade)
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@unique([gameInstanceId, userId])
    @@map("game_participants") // Explicitly map table name
}
